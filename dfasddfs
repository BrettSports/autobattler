[1mdiff --git a/characters/character_classes.py b/characters/character_classes.py[m
[1mindex 419d990..f0fdc61 100644[m
[1m--- a/characters/character_classes.py[m
[1m+++ b/characters/character_classes.py[m
[36m@@ -2,6 +2,28 @@[m [mimport random[m
 from abc import ABC, abstractmethod[m
 # abstract base class[m
 [m
[32m+[m[32m#TODO: I realized way too late after not reviewing main.py that this code uses integers for position[m[41m[m
[32m+[m[32m    #whilst main.py uses[m[41m [m
[32m+[m[32m#TODO: We have range checking function, how do we make range matter? Here or in main.py?[m[41m[m
[32m+[m[32m#TODO: Redundancy of text- should messages like "{character} has died" be returned from functions here or on main.py?[m[41m[m
[32m+[m[32m#TODO: Random module discussion - elements of random- which ones will be handled in which functions[m[41m[m
[32m+[m[32m    # Have not yet integrated randomness into attacks[m[41m[m
[32m+[m[32m#TODO: Integrate healing[m[41m[m
[32m+[m[32m#TODO: Flesh out/individualize basic attacks, integrate randomness on this end or on main.py?[m[41m[m
[32m+[m[32m#TODO: Individualize special attacks[m[41m[m
[32m+[m[32m#TODO: Could have a function that returns characters stats/attributes for character select/creation screen[m[41m[m
[32m+[m[32m#TODO: Helper functions needed for main.py? Discussion for Saturday[m[41m[m
[32m+[m[41m[m
[32m+[m[32m#TODO: syntax issues, noted in output. Too tired to figure them out yet.[m[41m[m
[32m+[m[32m#TODO: I copy-pasted a testing section suggested by AI, not sure how to use it yet[m[41m[m
[32m+[m[32m    # currently is commented out at the bottom of the file[m[41m[m
[32m+[m[41m[m
[32m+[m[32m#TODO: Nice to have- refine character stats[m[41m[m
[32m+[m[32m#TODO: Nice to have- Add more characters[m[41m[m
[32m+[m[32m#TODO: Nice to have- rename characters[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
 class Character(ABC):[m
     def __init__(self, name, max_hp, hp, basic_power, special_power, move_speed, attack_range, block_strength):[m
         self.name = name [m
[36m@@ -11,23 +33,58 @@[m [mclass Character(ABC):[m
         self.special_power = special_power[m
         self.move_speed = move_speed[m
         self.attack_range = attack_range[m
[31m-        self.position = position[m
[32m+[m[32m        self.position = 0[m[41m[m
         self.is_blocking = False[m
         self.block_strength = block_strength[m
         self.is_alive = True[m
 [m
 [m
     def move(self, direction, spaces = None):[m
[32m+[m[32m            """Move character on battlefield (0-11)"""[m[41m[m
[32m+[m[32m            if spaces is None:[m[41m[m
[32m+[m[32m                spaces = self.move_speed[m[41m[m
             if direction == "right":[m
[31m-                self.position += spaces[m
[32m+[m[32m                self.position += min(11, self.position + spaces)[m[41m[m
             elif direction == "left":[m
[31m-                self.position -= spaces [m
[32m+[m[32m                self.position -= max(0, self.position - spaces)[m[41m[m
[32m+[m[32m            return f"{self.name} moved to position {self.position}"[m[41m[m
 [m
[31m-    def take_damage():[m
[31m-        pass[m
[32m+[m[32m    def take_damage(self, damage):[m[41m[m
[32m+[m[32m        "Apply damage, considering blocking, determine if still alive"[m[41m[m
[32m+[m[32m        actual_damage = damage[m[41m[m
[32m+[m[32m        if self.is_blocking:[m[41m[m
[32m+[m[32m            actual_damage = max(1, damage - self.block_strength)[m[41m  [m
[32m+[m[32m            self.is_blocking = False[m[41m [m
[32m+[m[32m            damage_message = f" (blocked {damage - actual_damage} damage)"[m[41m[m
[32m+[m[32m        else:[m[41m[m
[32m+[m[32m            damage_message = ""[m[41m[m
[32m+[m[32m        self.hp = max(0, self.hp - actual_damage)[m[41m[m
[32m+[m[32m        if self.hp <= 0:[m[41m[m
[32m+[m[32m            self.hp = 0[m[41m[m
[32m+[m[32m            self.is_alive = False[m[41m[m
[32m+[m[32m            return f"{self.name} takes {actual_damage} damage {damage_message} and has died."[m[41m[m
[32m+[m[32m        return f"{self.name} takes {actual_damage} damage{damage_message}! {self.name} has HP remaining: {self.hp}/{self.max_hp}"[m[41m[m
[32m+[m[41m        [m
[32m+[m[32m    def get_distance_to(self, target):[m[41m[m
[32m+[m[32m        """Calculate distance to another character for attacks"""[m[41m[m
[32m+[m[32m        return abs(self.position - target.position)[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m    def is_in_range(self, target):[m[41m[m
[32m+[m[32m        """Check if target is close enough for an attack"""[m[41m[m
[32m+[m[32m        return self.get_distance_to(target) <= self.attack_range[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m    #TODO: This seems important. Figure it out later.[m[41m[m
[32m+[m[32m    def heal(self, amount):[m[41m[m
[32m+[m[32m        """Heal character by increasing HP"""[m[41m[m
[32m+[m[32m        old_hp = self.hp[m[41m[m
[32m+[m[32m        self.hp = min(self.max_hp, self.hp + amount)[m[41m[m
[32m+[m[32m        healed = self.hp - old_hp[m[41m[m
[32m+[m[32m        return f"{self.name} heals for {healed} HP! HP: {self.hp}/{self.max_hp}"[m[41m[m
 [m
[31m-    def block():[m
[31m-        pass [m
[32m+[m[32m    def block(self):[m[41m[m
[32m+[m[32m        "Put character in blocking state"[m[41m[m
[32m+[m[32m        self.is_blocking = True[m[41m[m
[32m+[m[32m        return f"{self.name} goes into block mode! (Block strength: {self.block_strength})"[m[41m[m
 [m
     @abstractmethod[m
     def basic_attack(self, target):[m
[36m@@ -48,36 +105,89 @@[m [mclass Tank(Character):[m
         super().__init__([m
             name="Tank",[m
             max_hp=150,[m
[32m+[m[32m            hp=150,[m[41m[m
             basic_power=15,[m
             special_power=25,[m
             move_speed=1,[m
             attack_range=1,[m
             block_strength=20[m
         )[m
[32m+[m[32m        self.position = position[m[41m[m
[32m+[m[32m        # can put special abilities here later[m[41m[m
 [m
[32m+[m[32m    #TODO basic_attack and special attack[m[41m[m
     def basic_attack(self, target):[m
[31m-        return super().basic_attack(target)[m
[32m+[m[32m        target.take_damage(self.basic_power)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def special_attack(self, target): #TBD[m[41m[m
[32m+[m[32m        target.take_damage(self.special_power)[m[41m[m
 [m
 class Ranged(Character):[m
     def __init__(self):[m
         super().__init__([m
             name="Ranged",[m
             max_hp=80,[m
[32m+[m[32m            hp=80,[m[41m[m
             basic_power=20,[m
             special_power=25,[m
             move_speed=3,[m
             attack_range=4,[m
[31m-            block_strength_10[m
[32m+[m[32m            block_strength=10[m[41m[m
         )[m
[32m+[m[32m        self.position = position[m[41m[m
[32m+[m[32m        # can put special abilities here later[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    #TODO basic_attack and special attack[m[41m[m
[32m+[m[32m    def basic_attack(self, target):[m[41m[m
[32m+[m[32m        target.take_damage(self.basic_power)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def special_attack(self, target):[m[41m [m
[32m+[m[32m        target.take_damage(self.special_power)[m[41m[m
 [m
 class Balanced(Character):[m
     def __init__(self):[m
         super().__init__([m
             name="Balanced",[m
             max_hp=100,[m
[32m+[m[32m            hp=80,[m[41m[m
             basic_power=18,[m
             special_power=25,[m
             move_speed=2,[m
             attack_range=2,[m
             block_strength=15[m
         )[m
[32m+[m[32m        self.position = position[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m    #TODO basic_attack and special attack[m[41m[m
[32m+[m[32m    def basic_attack(self, target):[m[41m[m
[32m+[m[32m        target.take_damage(self.basic_power)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def special_attack(self, target): #TBD[m[41m[m
[32m+[m[32m        target.take_damage(self.special_power)[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# # Testing section suggested by AI [uncomment entire section when ready to test][m[41m[m
[32m+[m[32m# if __name__ == "__main__":[m[41m[m
[32m+[m[32m#     print("=== CHARACTER CREATION TEST ===")[m[41m[m
[32m+[m[32m#     tank = create_character('tank', 2)[m[41m[m
[32m+[m[32m#     ranged = create_character('ranged', 8)[m[41m[m
[32m+[m[32m#     balanced = create_character('balanced', 5)[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m#     print(tank)[m[41m[m
[32m+[m[32m#     print(ranged)[m[41m[m
[32m+[m[32m#     print(balanced)[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m#     print("\n=== COMBAT TEST ===")[m[41m[m
[32m+[m[32m#     print(f"Distance between Tank and Ranged: {tank.get_distance_to(ranged)}")[m[41m[m
[32m+[m[32m#     print(ranged.basic_attack(tank))[m[41m[m
[32m+[m[32m#     print(tank.move("right", 2))[m[41m[m
[32m+[m[32m#     print(tank.special_attack(ranged))[m[41m[m
[32m+[m[32m#     print(balanced.basic_attack(ranged))[m[41m[m
[32m+[m[32m#     print(balanced.basic_attack(ranged))[m[41m[m
[32m+[m[32m#     print(balanced.basic_attack(ranged))  # Should trigger combo[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m#     print("\n=== FINAL STATUS ===")[m[41m[m
[32m+[m[32m#     print(tank)[m[41m[m
[32m+[m[32m#     print(ranged)[m[41m[m
[32m+[m[32m#     print(balanced)[m
\ No newline at end of file[m
[1mdiff --git a/main.py b/main.py[m
[1mindex 453d3a1..c506797 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -1,5 +1,12 @@[m
 # Our project[m
 import random[m
[32m+[m[32m# from characters.character_classes import Tank, Ranged, Balanced[m
[32m+[m
[32m+[m[32m#TODO Are we removing your character function at the top or integrate?[m
[32m+[m[32m#TODO Because if removing, then we won't have to worry about differences in varaible names like hit_points and hp[m
[32m+[m[32m#TODO Character select function that can retrieve stats from characters_classes.py[m
[32m+[m[32m#TODO AI character selector function[m
[32m+[m[32m#TODO GUI[m
 [m
 class Character:[m
     def __init__(self, name, hit_points, movement_speed, attack_damage, attack_range, initiative):[m
